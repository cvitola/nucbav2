/*.2. Definiendo mis primeros booleanos
Definir expresiones que sean verdaderas (describen el valor de verdad Verdadero) para cada uno de
los siguientes casos.
a. Cuando la celda actual tiene más de 5 bolitas de color Rojo.
b. Cuando la celda actual tiene al menos 9 bolitas en total entre rojas y negras.
c. Cuando la celda actual es la esquina Norte-Este.
d. Cuando la celda actual está vacía.
e. Cuando hay una sola celda en el tablero.
*/
a. nroBolitas(Rojo) > 5
b. nroBolitas(Rojas) + nroBolitas(Negra) == 9
c. puedeMover(Norte) && puedeMover(Este)
d. nroBolitas(Negro) == 0 && nroBolitas(Azul) == 0 && nroBolitas(Verde) == 0 && nroBolitas(Rojo) == 0
e. not puedeMover(Norte) && not puedeMover(Sur) && not  puedeMover(Oeste) || not puedeMover(Este)


/*Sí se puede, sí se puede...
Escribir los siguientes procedimientos, recordando no mezclar niveles de abstracción del problema,
para lo cual puede ser necesario definir otros procedimientos y/o funciones.
a. SacarUnaFicha_SiSePuede(colorDeLaFicha) que, dado el colorDeLaFicha que debe 
sacarse, saque una ficha siempre y cuando la misma esté en la celda. Si no hubiera fichas del
color dado, el procedimiento no hace nada. Si hubiera varias fichas, solo debe sacar una.
OBSERVACIÓN: cada ficha se representa con una bolita del color correspondiente. */

procedure SacarUnaFicha_SiSePuede(colorDeLaFicha) {
/*  
    PROPOSITO:
        Sacar una ficha de color **colorDeLaFicha**
    PARAMETROS:
        colorDeLaFicha: Color - Se refiere al color de la ficha a sacar.
    PRECONDICIONES:
        No Tiene.
*/    
    if(nroBolitas(colorDeLaFicha) > 0 ){

    }
}
/*
b. DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) que, dados
los colores de dos jugadores, cuyos puntos se representan mediante la cantidad de bolitas del
color del jugador,, otorgue un punto al jugador con color colorDelLocal solamente en el caso
en que la celda actual contiene la misma cantidad de bolitas de ambos colores.*/

procedure DesempatarParaElLocal_Contra_(colorDelLocal,colorDelVisitante) {
    /*
    PROPOSITO:
        Otorgar un punto al jugador con color **colorDelLocal** solamente en el caso en que la celda actual contiene la misma cantidad de bolitas de ambos colores
    PARAMETROS:
        *colorDelLocal - Color: Identifica al color del jugador Local.
        *colorDelVisitante - Color: Identifica al color del jugador Visitante.
    PRECONDICIONES:
        No tiene.
    */
    if(nroBolitas(colorDelLocal) == nroBolitas(colorDelVisitante)){
        DarPuntoParaElLocal_(colorDelLocal)
    }
    
}

procedure DarPuntoParaElLocal_(colorAPoner) {
    /*
    PROPOSITO:
         Sumar un punto para el Local de color **colorAPoner** en la celda actual.
    PARAMETROS:
        *colorAPoner - Color: Identifica al color del jugador Local.

    PRECONDICIONES:
        No tiene.
    Observaciones: La bolita de color **colorAPoner** identifica un punto para ..
    */    
    Poner(colorAPoner)
}
/*
c. ExpandirBacteriaDeLaColonia(), que siempre que en la celda actual haya un cultivo de
bacterias y haya suficientes nutrientes, agregue exactamente una bacteria más y consuma
nutrientes, a razón de dos nutrientes por bacteria expandida; si no hay bacterias o no hay
suficientes nutrientes, no hace nada. Las bacterias se representan con bolitas Verdes y los
nutrientes con bolitas Rojas.*/

procedure ExpandirBacteriaDeLaColonia() {
    /*
    PROPOSITO:
        Agregar una bacteria en el cultivo a razón de dos nutrientes.    
    PRECONDICIONES:
        No tiene.
    */    
    if(nroBolitas(Rojo)>=2){
        ConsumirNutrientesYAgregarBacteria()

    }
}

procedure ConsumirNutrientesYAgregarBacteria() {
    /*
    PROPOSITO:
        Consumir dos nutrientes y agregar una bacteria.
    PRECONDICIONES:
        No tiene.
    OBSERVACIONES:
        Una bolita de color Rojo representa un nutriente.
        Una bolita de color Verde representa una bacteria.
    */      
    repeat (2) {
        Sacar(Rojo)
    }
    Poner(Verde)

}
/*
d. PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha), que dado un color para
representar flechas, ponga una flecha al Norte si existe espacio para moverse en esa dirección.
Las flechas serán representadas con una bolita del color dado.*/

procedure PonerFlecha_AlNorteSiCorresponde(colorDeLaFlecha) {
    /*
    PROPOSITO:
         Agregar una flecha de color **colorDeLaFecha** al norte de la ubicación actual.
    PARAMETROS:
        *colorDeLaFlecha - Color: Identifica al color de la flecha.
    PRECONDICIONES:
        No tiene.
    */      
    if(puedeMover(Norte)){
        AgregarFlecha_(colorDeLaFlecha) //ES NECESARIO O DIRECTAMENTE PUEDO HACER Poner(colorAPoner) ¿?¿?¿?
    }
}
procedure AgregarFlecha_(colorAPoner) {
    /*
    PROPOSITO:
         Agregar una flecha de color **colorDeLaFecha** en la celda actual.
    PARAMETROS:
        *colorAPoner - Color: Identifica al color de la flecha.
    PRECONDICIONES:
        No tiene.
    Observaciones: 
        Una flecha se representa por una bolita de color **colorAPoner**    
    */    
    Poner(colorAPoner)
}
/*4. Hacer solo si...
La combinación de parámetros y expresiones booleanas es interesante.
a. BIBLIOTECA Escribir un procedimiento Poner_Si_(color, condición) que dado un color
y un valor de verdad llamado condición, ponga en la celda actual una bolita del color dado si el
valor de verdad de la condición es verdadero, y no lo ponga si no.
EJEMPLO: Poner_Si_(Rojo, nroBolitas(Rojo) == 2) solamente pone una bolita roja cuando
hay exactamente dos rojas en la celda actual.
b. BIBLIOTECA Escribir el procedimiento Sacar_Si_(color, condición) que actúa de forma
similar al anterior, pero ahora sacando bolitas si la condición se cumple*/

procedure Poner_Si_(color, condición) {
    /*
    PROPOSITO: Poner una bolita de **color** siempre y cuando se cumpla el valor de verdad de **condición**
    PARAMETROS:
        *color: Color - se refiere al color de la bolita.
        *condicion: Booleano - se refiere a la expresión a evaluar.
    PRECONDICIONES: No tiene
    */
    if (condición) {
        Poner(color)
    }
}

procedure Sacar_Si_(color, condición) {
    /*
    PROPOSITO: Sacar una bolita de **color** siempre y cuando se cumpla el valor de verdad de **condición**
    PARAMETROS:
        *color: Color - se refiere al color de la bolita.
        *condicion: Booleano - se refiere a la expresión a evaluar.
    PRECONDICIONES: Debe existir al menos una bolita de **color**
    */   
    if(nroBolitas(color) > 0 && condición)
    {   
        Sacar(color)
    }
}

/*BANCO PARTE 1*/

procedure Depositar_EnMoneda_ComoPesos(cantidadADepositar, moneda){
   /*
    PROPOSITO: Depositar en pesos argentinos la cantidad de **cantidadADepositar** en el tipo de moneda **moneda** haciendo la convsersion correspondiente.
    PARAMETROS:
        *cantidadADepositar: Numero - Se refiere al monto de la moneda a convertir a Pesos.
        *moneda: Color - se refiere a la moneda que el Cliente tiene en su poder.
    PRECONDICIONES: 
        No tiene
    */      
    if(moneda == Verde) {
        Convertir_MonedaDeOrigenAPesosConFactorConversión_(cantidadADepositar, 80)
    }
    if(moneda == Azul){
        Convertir_MonedaDeOrigenAPesosConFactorConversión_(cantidadADepositar, 90)
    }
    if(moneda == Rojo){
        Convertir_MonedaDeOrigenAPesosConFactorConversión_(cantidadADepositar, 12)
    }
        
}

procedure Convertir_MonedaDeOrigenAPesosConFactorConversión_(cantidad, factorConversión) {
   /*
    PROPOSITO: Transforma la cantidad **cantidad** de la moneda de origen a pesos argentino segun el tipo de cambio **factorConversión**
    PARAMETROS:
        *cantidad: Numero - Se refiere al monto de la moneda a convertir a Pesos.
        *factorConversión: Numero - es el tipo de cambio oficial de la moneda.
    PRECONDICIONES: 
        No tiene
    Observaciones:
        Los pesos argentinos son representados por el color Negro
    */       
    repeat (cantidad * factorConversión) {
        Poner(Negro)
    }
}